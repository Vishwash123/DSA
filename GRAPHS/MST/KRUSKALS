#include <bits/stdc++.h>
using namespace std;

int findParent(int node,vector<int> &parent)
{
    if(parent[node]==node)
    {
        return node;
    }
    return parent[node] = findParent(parent[node],parent);

}


void unionByRank(int u,int v,vector<int> &parent,vector<int> &rank)
{
    int parent_u = findParent(u,parent);
    int parent_v = findParent(v,parent);

    if(rank[parent_u]>rank[parent_v])
    {
        parent[v] = parent_u;
    }
    else if(rank[parent_u]<rank[parent_v])
    {
        parent[u] = parent_v;
    }
    else
    {
        parent[u] = parent_v;
        rank[v]++;
    }

}
int main() {
    int n;
    cin>>n;
    vector<vector<int>> adj[n];
    vector<pair<int,pair<int,int>>> edges;

    for (int i=0;i<n;i++)
    {
        for(auto x:adj[i])
        {
            int u = i;
            int v = x[0];
            int w = x[1];

            edges.push_back({w,{u,v}});
        }
    }

    vector<int> parent(n);
    vector<int> rank(n,0);
    for (int i=0;i<n;i++)
    {
        parent[i]=i;
    }

    sort(edges.begin(),edges.end());
    int minWt = 0;
    for (auto x:edges)
    {
        int u  = x.second.first;
        int v  = x.second.second;
        int w = x.first;

        if(findParent(u,parent)!= findParent(v,parent))
        {
            minWt+=w;
            //we can modify the code to create MST as well
            unionByRank(u,v,parent,rank);
        }

    }

    //minWt has the minimum weight
    //parent has the ultimate parent of each node using which we can get edges

}
