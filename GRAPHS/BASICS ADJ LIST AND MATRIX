#include <bits/stdc++.h>
using namespace std;

//USING ADJACENCY LIST :


//template<typename T>
//class graph{
//public:

//    unordered_map<T,list<T>> adj;
//   //you can also use array of vectors
//    void addEdge(T u,T v,bool dir)
//    {
//        adj[u].push_back(v);
//        //now if the graph is bidirectional or undirected
//        if(dir==1)
//        {
//            adj[v].push_back(u);
//        }
//    }
//
//
//    void printGraph()
//    {
//        for (auto x:adj)
//        {
//            cout<<x.first<<" -> ";
//            for (auto y:x.second)
//            {
//                cout<<y<<" ";
//            }
//            cout<<endl;
//        }
//    }
//
//
//
//};




//1) with adjacecy matrix :

template<typename T>
class graph{
public:

    int **adj;
    //vector<vector<int>> adj(size,vector<int> (size,0));
    int size;

    graph(int size)
    {
        this->size = size;
        adj=new int*[size];
        for (int i=0;i<size;i++)
        {
            adj[i]=new int[size];
            for (int j=0;j<size;j++)
            {
                adj[i][j]=0;
            }
        }

    }


    void addEdge(T u,T v,bool dir)
    {
        adj[u][v]=1;
        //now if the graph is bidirectional or undirected
        if(dir==1)
        {
            adj[v][u]=1;
        }
    }


   
    



};
int main() {

    cout<<"Enter the no. of nodes/vertices : "<<endl;
    int n;
    cin>>n;
    cout<<"Enter the no. of edges : "<<endl;
    int e;
    cin>>e;
    graph<int> g;

    for (int i=0;i<e;i++)
    {
        int u,v;
        cout<<"Enter the starting and ending point of the edge : "<<endl;
        cin>>u>>v;
        g.addEdge(u,v,1);//for unidirectional we pass 0;

    }

    g.printGraph();

//    5
//    6
//    0 1
//    1 2
//    2 3
//    3 1
//    3 4
//    0 4


}
