#include<bits/stdc++.h>
using namespace std;


int findparent(int node,vector<int> &parent)
{
    if(parent[node]==node)
    {
        return node;
    }

    return parent[node] = findparent(parent[node],parent);

}



void unionByRank(int u,int v,vector<int> &parent,vector<int> &rank,int &count)
{
    int parent_u = findparent(u,parent);
    int parent_v = findparent(v,parent);

    if(rank[parent_u] > rank[parent_v])
    {
        parent[parent_v] = parent_u;
    }
    else if (rank[parent_u] < rank[parent_v])
    {
        parent[parent_u] = parent_v;
    }
    else
    {
        parent[parent_v] = parent_u;
        rank[parent_u]++; //increase rank because acomponent of same size is added so height increases
    }

    count--; //everytime two edges connect components are connected so decrease the count everytime this happens

}



void unionBySize(int u,int v,vector<int> &parent,vector<int> &size,int &count)
{
    int parent_u = findparent(u,parent);
    int parent_v = findparent(v,parent);

    if(size[parent_u] > size[parent_v])
    {
        parent[parent_v] = parent_u;
        size[parent_u]+=size[parent_v];
    }

    else
    {
        parent[parent_u] = parent_v;
        size[parent_v]+=size[parent_u]; //increase size because a component of is added so size increases
    }

    count--; //everytime two edges connect components are connected so decrease the count everytime this happens

}







int main() {
    int n;
    int e;
    vector<vector<int>> edges;
    for (int i=0;i<e;i++)
    {
        int u,v;
        cin>>u>>v;
        edges.push_back({u,v});
    }

    vector<int> rank(n,0);
    vector<int> parent(n);
    int disconnected_count = n;//initialize to maximum no. of possible components i.e. no. of nodes/cells/vertices
    //because initially none of the vertices are connected

    for (int i=0;i<n;i++)
    {
        parent[i]=i;
    }

    for (int i=0;i<e;i++)
    {
        int s = edges[i][0];
        int d = edges[i][1];
        //here we dont find parents inside this loop we do it in kruskal's algo to detect whether adding the edge will create cycle or not
        //if the parents are same adding edge creates a cycle

        unionByRank(s,d,parent,rank,disconnected_count);

    }


    // now we can use the findparent to find if two nodes belong to same component or not or they are connected or not
    //we can use union in kruskal to find MST
    //we can use the disconnected_count to get the no. of components(disconnected) in the graph

    //BUT what if we want to find size of components
    //for this we need union by size;
    vector<int> size(n,1);
    //perform same operations like union by rank





}
